#!/usr/bin/env node
/**
 * @remix-run/serve v0.0.0-nightly-ebc148c-20230824
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

require('@remix-run/node/install');
var path = require('node:path');
var os = require('node:os');
var url = require('node:url');
var node = require('@remix-run/node');
var express$1 = require('@remix-run/express');
var compression = require('compression');
var express = require('express');
var morgan = require('morgan');
var sourceMapSupport = require('source-map-support');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);
var url__default = /*#__PURE__*/_interopDefaultLegacy(url);
var compression__default = /*#__PURE__*/_interopDefaultLegacy(compression);
var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
var morgan__default = /*#__PURE__*/_interopDefaultLegacy(morgan);
var sourceMapSupport__default = /*#__PURE__*/_interopDefaultLegacy(sourceMapSupport);

process.env.NODE_ENV = process.env.NODE_ENV ?? "production";
sourceMapSupport__default["default"].install();
node.installGlobals();
run();
async function run() {
  let port = process.env.PORT ? Number(process.env.PORT) : 3000;
  if (Number.isNaN(port)) port = 3000;
  let buildPathArg = process.argv[2];
  if (!buildPathArg) {
    console.error(`
  Usage: remix-serve <build-dir>`);
    process.exit(1);
  }
  let buildPath = url__default["default"].pathToFileURL(path__default["default"].resolve(process.cwd(), buildPathArg)).href;
  let build = await import(buildPath);
  let onListen = () => {
    var _Object$values$flat$f;
    let address = process.env.HOST || ((_Object$values$flat$f = Object.values(os__default["default"].networkInterfaces()).flat().find(ip => String(ip === null || ip === void 0 ? void 0 : ip.family).includes("4") && !(ip !== null && ip !== void 0 && ip.internal))) === null || _Object$values$flat$f === void 0 ? void 0 : _Object$values$flat$f.address);
    if (!address) {
      console.log(`Remix App Server started at http://localhost:${port}`);
    } else {
      console.log(`Remix App Server started at http://localhost:${port} (http://${address}:${port})`);
    }
    if (process.env.NODE_ENV === "development") {
      void node.broadcastDevReady(build);
    }
  };
  let app = express__default["default"]();
  app.disable("x-powered-by");
  app.use(compression__default["default"]());
  app.use(build.publicPath, express__default["default"].static(build.assetsBuildDirectory, {
    immutable: true,
    maxAge: "1y"
  }));
  app.use(express__default["default"].static("public", {
    maxAge: "1h"
  }));
  app.use(morgan__default["default"]("tiny"));
  let requestHandler;
  app.all("*", async (req, res, next) => {
    try {
      if (!requestHandler) {
        let build = await import(buildPath);
        requestHandler = express$1.createRequestHandler({
          build,
          mode: process.env.NODE_ENV
        });
      }
      return await requestHandler(req, res, next);
    } catch (error) {
      next(error);
    }
  });
  let server = process.env.HOST ? app.listen(port, process.env.HOST, onListen) : app.listen(port, onListen);
  ["SIGTERM", "SIGINT"].forEach(signal => {
    process.once(signal, () => server === null || server === void 0 ? void 0 : server.close(console.error));
  });
}
