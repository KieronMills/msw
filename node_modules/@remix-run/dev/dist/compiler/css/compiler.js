/**
 * @remix-run/dev v0.0.0-nightly-ebc148c-20230824
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var node_module = require('node:module');
var esbuild = require('esbuild');
var loaders = require('../utils/loaders.js');
var cssTarget = require('../utils/cssTarget.js');
var cssImports = require('../plugins/cssImports.js');
var absoluteCssUrlsPlugin = require('../plugins/absoluteCssUrlsPlugin.js');
var emptyModules = require('../plugins/emptyModules.js');
var mdx = require('../plugins/mdx.js');
var external = require('../plugins/external.js');
var cssModuleImports = require('../plugins/cssModuleImports.js');
var cssSideEffectImports = require('../plugins/cssSideEffectImports.js');
var vanillaExtract = require('../plugins/vanillaExtract.js');
var bundleEntry = require('./plugins/bundleEntry.js');
var bundle = require('./bundle.js');
var analysis = require('../analysis.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var esbuild__namespace = /*#__PURE__*/_interopNamespace(esbuild);

const createCompilerEsbuildConfig = ctx => {
  return {
    entryPoints: {
      "css-bundle": bundleEntry.cssBundleEntryModuleId
    },
    outdir: ctx.config.assetsBuildDirectory,
    platform: "browser",
    format: "esm",
    // Node built-ins (and any polyfills) are guaranteed to never contain CSS,
    // and the JS from this build will never be executed, so we can safely skip
    // bundling them and leave any imports of them as-is in the generated JS.
    // Any issues with Node built-ins will be caught by the browser JS build.
    external: node_module.builtinModules,
    loader: loaders.loaders,
    bundle: true,
    logLevel: "silent",
    sourcemap: ctx.options.sourcemap,
    // As pointed out by https://github.com/evanw/esbuild/issues/2440, when tsconfig is set to
    // `undefined`, esbuild will keep looking for a tsconfig.json recursively up. This unwanted
    // behavior can only be avoided by creating an empty tsconfig file in the root directory.
    tsconfig: ctx.config.tsconfigPath,
    mainFields: ["browser", "module", "main"],
    treeShaking: true,
    // Minification is handled via a separate esbuild pass. This is because CSS
    // minification takes into account the "target" option (e.g. the CSS
    // properties top/bottom/left/right when used as a set will be minified to
    // shorthand of "inset" if supported by the target browsers), but this
    // option affects all code in the build, not just CSS. If we set the target
    // too low, we get build errors when esbuild detects JS features that can't
    // be transpiled for the specified target. By separating the minification of
    // CSS files from the compilation of the entire module graph, we're better
    // able to target the Remix browser support baseline, i.e. anything that
    // supports ES module scripts: https://caniuse.com/es6-module
    minify: false,
    entryNames: "[dir]/[name]-[hash]",
    chunkNames: "_shared/[name]-[hash]",
    assetNames: "_assets/[name]-[hash]",
    publicPath: ctx.config.publicPath,
    define: {
      "process.env.NODE_ENV": JSON.stringify(ctx.options.mode)
    },
    jsx: "automatic",
    jsxDev: ctx.options.mode !== "production",
    plugins: [bundleEntry.cssBundleEntryModulePlugin(ctx), cssModuleImports.cssModulesPlugin(ctx, {
      outputCss: true
    }), vanillaExtract.vanillaExtractPlugin(ctx, {
      outputCss: true
    }), cssSideEffectImports.cssSideEffectImportsPlugin(ctx), cssImports.cssFilePlugin(ctx), absoluteCssUrlsPlugin.absoluteCssUrlsPlugin(), external.externalPlugin(/^https?:\/\//, {
      sideEffects: false
    }), mdx.mdxPlugin(ctx),
    // Skip compilation of common packages/scopes known not to include CSS imports
    emptyModules.emptyModulesPlugin(ctx, /^(@remix-run|react|react-dom)(\/.*)?$/, {
      includeNodeModules: true
    }), emptyModules.emptyModulesPlugin(ctx, /\.server(\.[jt]sx?)?$/), external.externalPlugin(/^node:.*/, {
      sideEffects: false
    })],
    supported: {
      "import-meta": true
    }
  };
};
const createCssProcessorEsbuildConfig = ({
  ctx,
  cssContents,
  sourceMapContents
}) => {
  let sourceMapString = sourceMapContents ? `/*# sourceMappingURL=data:application/json;base64,${Buffer.from(sourceMapContents).toString("base64")} */` : null;
  let cssProcessorEntryId = ":contents"; // Could be anything, but this makes the output CSS comment look nicer - /* css-bundle::contents */
  let cssProcessorEntryFilter = new RegExp(`^${cssProcessorEntryId}$`);
  return {
    entryPoints: {
      "css-bundle": cssProcessorEntryId
    },
    // This ensures the generated file name starts with "css-bundle"
    outdir: ctx.config.assetsBuildDirectory,
    bundle: true,
    // We only want to process the CSS bundle contents so anything else is external
    external: ["*"],
    logLevel: "silent",
    sourcemap: ctx.options.sourcemap,
    // As pointed out by https://github.com/evanw/esbuild/issues/2440, when tsconfig is set to
    // `undefined`, esbuild will keep looking for a tsconfig.json recursively up. This unwanted
    // behavior can only be avoided by creating an empty tsconfig file in the root directory.
    tsconfig: ctx.config.tsconfigPath,
    minify: ctx.options.mode === "production",
    target: cssTarget.cssTarget,
    entryNames: "[dir]/[name]-[hash]",
    chunkNames: "_shared/[name]-[hash]",
    assetNames: "_assets/[name]-[hash]",
    publicPath: ctx.config.publicPath,
    plugins: [{
      name: "css-processor-input",
      setup(build) {
        build.onResolve({
          filter: cssProcessorEntryFilter
        }, ({
          path
        }) => {
          return {
            path,
            namespace: "css-bundle"
          };
        });
        build.onLoad({
          filter: cssProcessorEntryFilter
        }, async () => {
          return {
            loader: "css",
            contents: [cssContents, sourceMapString].filter(Boolean).join("\n")
          };
        });
      }
    }]
  };
};
let create = async ctx => {
  let compiler = await esbuild__namespace.context({
    ...createCompilerEsbuildConfig(ctx),
    write: false,
    metafile: true
  });
  let compile = async () => {
    var _rawFiles$css, _rawFiles$sourceMap;
    let rawResult = await compiler.rebuild();
    analysis.writeMetafile(ctx, "metafile.css.json", rawResult.metafile);
    let rawFiles = bundle.groupCssBundleFiles(ctx, rawResult.outputFiles);

    // We hand the result to a 2nd esbuild pass to optionally handle CSS
    // minification with its own "target" separate from the JS build. This
    // happens in dev mode to keep dev and production builds as close as
    // possible even though it's not strictly required.
    let processedResult = (_rawFiles$css = rawFiles.css) !== null && _rawFiles$css !== void 0 && _rawFiles$css.text ? await esbuild__namespace.build({
      ...createCssProcessorEsbuildConfig({
        ctx,
        cssContents: rawFiles.css.text,
        sourceMapContents: ((_rawFiles$sourceMap = rawFiles.sourceMap) === null || _rawFiles$sourceMap === void 0 ? void 0 : _rawFiles$sourceMap.text) ?? null
      }),
      write: false,
      metafile: false
    }) : null;
    let processedFiles = (processedResult === null || processedResult === void 0 ? void 0 : processedResult.outputFiles) ?? [];
    return {
      bundleOutputFile: bundle.groupCssBundleFiles(ctx, processedFiles).css,
      outputFiles: [...processedFiles, ...rawFiles.assets]
    };
  };
  return {
    compile,
    cancel: compiler.cancel,
    dispose: compiler.dispose
  };
};

exports.create = create;
